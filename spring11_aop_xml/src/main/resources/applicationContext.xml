<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd">


    <bean id="accountService" class="com.spring.service.impl.AccountServiceImpl"></bean>

    <!--spring基于xml的AOP配置-->
    <!--
        1.配置通知bean
        2.使用aop:config标签表明开始AOP的配置
        3.使用aop:aspect标签配置切面
            id:切面的唯一标识
            ref:通知类bean的id
        4.在aop:aspect标签内部使用对应的通知标签
            aop:before: 前置通知
                method: 指定通知类中哪个方法时前置通知
                pointcut: 指定切入点表达式.具体指定业务层中哪个类的哪个方法需要增强.
        切入点表达式: execution(表达式)
            表达式: 访问修饰符 返回值 包名.类名.方法名(参数列表)\
            标准写法: public void com.spring.service.impl.AccountServiceImpl.saveAccount()
            访问修饰符: 可以省略
                void com.spring.service.impl.AccountServiceImpl.saveAccount()
            返回值: 可以使用通配符*,标识任意类型返回值.
                * com.spring.service.impl.AccountServiceImpl.saveAccount()
            包名: 可以使用通配符*,但有几级包就需要几个通配符
                * *.*.*.*.AccountServiceImpl.saveAccount()
                可以使用..表示当前包及其子包
                * *..AccountServiceImpl.saveAccount
            类名和方法名: 可以使用通配符*
                * *..*.*()
            参数列表:
                直接写数据类型 * *..*.*(int)
                使用通配符* * *..*.*(*)  只会执行有一个参数的方法
                使用..表示有无参数 * *..*.*(..)

            实际工作中,一般写为 * com.spring.service.impl.*.*(..)
    -->
    <bean id="logger" class="com.spring.util.Logger"></bean>
    <bean id="logger2" class="com.spring.util.Logger2"></bean>
    <aop:config>
        <aop:pointcut id="loggerPointCut" expression="execution(* com.spring.service.impl.*.*(..))"/>
        <aop:aspect id="logger2" ref="logger2">
            <aop:before method="beforePrintLog" pointcut-ref="loggerPointCut"/>
        </aop:aspect>
        <aop:aspect id="logger" ref="logger">
            <!--前置通知-->
            <aop:before method="beforePrintLog" pointcut-ref="loggerPointCut"/>
            <!--后置通知-->
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="loggerPointCut"/>
            <!--异常通知-->
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="loggerPointCut"/>
            <!--最终通知-->
            <aop:after method="afterPrintLog" pointcut-ref="loggerPointCut"/>
            <!--<aop:around method="aroundPrintLog" pointcut-ref="loggerPointCut"/>-->
        </aop:aspect>

    </aop:config>
</beans>